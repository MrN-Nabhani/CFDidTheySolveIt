{"version":3,"sources":["Redux/Reducers/usersReducer.js","Redux/Reducers/index.js","Redux/actions/types.js","Redux/store.js","Components/User.jsx","Redux/actions/RemoveUser.js","Components/AddUserBtn.jsx","Redux/actions/AddUser.js","App.js","MainWrapper.js","serviceWorker.js","index.js"],"names":["initialState","combineReducers","users","state","action","type","Set","payload","filter","user","store","createStore","rootReducer","User","handle","photoURL","searchProblem","useState","userInfo","setUserInfo","isLoading","setLoading","status","setStatus","dispatch","useDispatch","useEffect","a","Axios","get","params","userStatusRes","data","result","_","isEqual","id","index","length","foundIndex","findIndex","problem","contestId","verdict","className","onClick","rel","href","target","alt","src","replace","AddUserBtn","setUser","then","res","AddUser","catch","err","alert","value","placeholder","onChange","evt","App","queryProblem","setQueryProblem","storedUsers","useSelector","setUsers","profilePhotos","setProfilePhotos","handles","join","userInfoRes","resURL","autoFocus","pattern","title","str","toUpperCase","parseInt","console","log","match","handleChange","map","userName","idx","key","titlePhoto","MainWrapper","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e6201361.chunk.js","sourcesContent":["import { ADD_USER, REMOVE_USER } from \"../actions/types\";\r\nimport _ from 'lodash';\r\n\r\nconst initialState = [\r\n\t'Hanii.Gerges',\r\n\t'Mr.N_Nabhani',\r\n\t'theBiker'\r\n];\r\n\r\nexport default function(state = initialState, action) {\r\n\tswitch(action.type){\r\n\r\n\t\tcase ADD_USER:\r\n\t\t\treturn [... new Set([\r\n\t\t\t\t...state,\r\n\t\t\t\taction.payload,\r\n\t\t\t])];\r\n\r\n\t\tcase REMOVE_USER:\r\n\t\t\treturn state.filter((user)=> user !== action.payload);\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n\r\n}","import { combineReducers } from \"redux\";\r\nimport usersReducer from \"./usersReducer\";\r\n\r\nexport default combineReducers({\r\n\tusers: usersReducer,\r\n});","export const ADD_USER \t\t= 'ADD_TO_DISPLAY';\r\nexport const REMOVE_USER \t= 'REMOVE_FROM_DISPLAY';","import { createStore } from 'redux';\r\nimport rootReducer from './Reducers';\r\n\r\nconst initailState = {};\r\n\r\nconst store = createStore(\r\n\trootReducer, \r\n\tinitailState\r\n);\r\n\r\n\r\nexport default store;","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport { RemoveUser } from \"../Redux/actions/RemoveUser\";\r\n\r\nimport Axios from \"axios\";\r\nimport _ from \"lodash\";\r\n\r\nimport \"../Styling/user.scss\";\r\n\r\nfunction User({ handle, photoURL, searchProblem }) {\r\n  const [userInfo, setUserInfo] = useState([]);\r\n  const [isLoading, setLoading] = useState(true);\r\n\r\n  const [status, setStatus] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    (async function fetchData() {\r\n      let userStatusRes = await Axios.get(\"https://codeforces.com/api/user.status\", {\r\n        params: { handle: handle },\r\n      });\r\n\r\n      setUserInfo(userStatusRes.data.result);\r\n      setLoading(false);\r\n    })();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (_.isEqual(searchProblem, { id: -1, index: \"X\" })) {\r\n      setStatus(\"Enter a Valid Problem\");\r\n      return;\r\n    }\r\n    \r\n    if(userInfo.length === 0){\r\n      setStatus(\"ZERO submissions\");\r\n      return;\r\n    }\r\n\r\n    const foundIndex = _.findIndex(userInfo, {\r\n      problem: { contestId: searchProblem.id, index: searchProblem.index },\r\n    });\r\n\r\n    if (foundIndex === -1) setStatus(\"NOT SOLVED\");\r\n    else if (userInfo[foundIndex].verdict == \"OK\")\r\n      setStatus(\"SOLVED\");\r\n    else \r\n      setStatus(\"TRIED\");\r\n\r\n  }, [userInfo, searchProblem]);\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"userContainer\">\r\n      <button\r\n        className=\"remove-btn\"\r\n        onClick={() => dispatch(RemoveUser(handle))}\r\n      >\r\n        x\r\n      </button>\r\n      <a\r\n        rel=\"noopener noreferrer\"\r\n        href={`https://codeforces.com/profile/${handle}`}\r\n        target=\"_blank\"\r\n      >\r\n        <div className=\"user\">\r\n          <h3> {handle} </h3>\r\n\r\n          <img alt=\"\" src={photoURL} />\r\n\r\n          <div className=\"status\">\r\n            {isLoading && <i className=\"fa fa-spin fa-refresh\"></i>}\r\n            {!isLoading > 0 && (\r\n              <div id={status.replace(/\\s/g, \"-\")}>\r\n                {status}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default User;\r\n","import { REMOVE_USER } from \"./types\";\n\nexport const RemoveUser = (user) => {\n  return {\n    type: REMOVE_USER,\n    payload: user,\n  };\n};\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { AddUser } from '../Redux/actions/AddUser';\r\n\r\nimport '../Styling/UserBtn.scss';\r\n\r\nimport Axios from 'axios';\r\n\r\nconst AddUserBtn = () =>{\r\n\t\r\n\tconst [user, setUser] = useState('');\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst addNewUser = ()=>{\r\n\t\tAxios.get('https://codeforces.com/api/user.status', {params: {handle: user}}).then(\r\n\t\t\t(res)=>{\r\n\t\t\t\tdispatch(AddUser(user));\t\t\t\t\r\n\t\t\t\tsetUser('');\r\n\t\t\t}\r\n\t\t).catch((err) => {\r\n\t\t\talert('user not found!');\r\n\t\t});\r\n\t}\r\n\r\n\treturn(\r\n\r\n\t\t<div className='addUserBtn'>\r\n\t\t\t<h3> Add User </h3>\r\n\t\t\t\r\n\t\t\t<button className='btn' onClick={()=>{addNewUser()}}>+</button>\r\n\r\n\t\t\t<input value={user} className='handleInputField' type=\"text\" placeholder=\"enter handle\"\r\n\t\t\tonChange={ (evt)=>{setUser(evt.target.value)} } />\r\n\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\n\r\n\r\nexport default AddUserBtn;","import { ADD_USER } from \"./types\";\n\nexport const AddUser = (user) => {\n  return {\n    type: ADD_USER,\n    payload: user,\n  };\n};\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport User from \"./Components/User.jsx\";\nimport Axios from \"axios\";\nimport AddUserBtn from \"./Components/AddUserBtn.jsx\";\n\nimport \"./Styling/App.scss\";\n\nfunction App() {\n  const [queryProblem, setQueryProblem] = useState({ id: -1, index: \"X\" });\n\n  const storedUsers = useSelector((state) => state.users);\n\n  const [users, setUsers] = useState([]);\n  const [profilePhotos, setProfilePhotos] = useState([]);\n\n\n  useEffect(() => {\n    setUsers(storedUsers);\n  }, [storedUsers]);\n\n\n  useEffect(() => {\n\n    if(users.length > 0)\n      (async function fetchData() {\n        let userInfoRes = await Axios.get(\"https://codeforces.com/api/user.info\", {\n          params: { handles: users.join(';') },\n        });\n    \n        const resURL = userInfoRes.data.result;\n        setProfilePhotos(resURL);\n      })();\n\n  }, [users]);\n\n\n  const handleChange = (evt) => {\n    let str = evt.target.value.replace(/\\s/g, \"\").toUpperCase();\n\n    const id = parseInt(str);\n    const index = str.replace(id, \"\");\n\n    console.log(id + index);\n    const regExp = /^\\d+[A-Z]\\d?$/g;\n    if (`${id}${index}`.match(regExp))\n      setQueryProblem({ id, index });\n    else \n      setQueryProblem({ id: -1, index: \"X\" });\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1> Who Solved Problem </h1>\n        <input\n          autoFocus\n          type=\"text\"\n          pattern=\"\\d+\\w\\d?\"\n          title=\"Not a valid problem that follows the pattern: \\d+\\w\\d?\"\n          placeholder=\"1272C\"\n          onChange={(evt) => handleChange(evt)}\n        />\n        <h1> ? </h1>\n      </header>\n\n      <main>\n        <div className=\"users-area\">\n          <AddUserBtn />\n\n          {users.map((userName, idx) => (\n            <User\n              key={idx}\n              handle={userName}\n              photoURL={profilePhotos[idx]?.titlePhoto ?? \"images/user.png\"}\n              searchProblem={queryProblem}\n            />\n          ))}\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react'\r\nimport { Provider } from 'react-redux';\r\nimport store from './Redux/store';\r\nimport App from './App';\r\n\r\nfunction MainWrapper() {\r\n\treturn (\r\n\t\t<Provider store={store}>\r\n\t\t\t<App />\r\n\t\t</Provider>\r\n\t)\r\n}\r\n\r\nexport default MainWrapper;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainWrapper from './MainWrapper';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MainWrapper />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}