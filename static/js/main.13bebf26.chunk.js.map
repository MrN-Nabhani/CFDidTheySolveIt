{"version":3,"sources":["Redux/Reducers/usersReducer.js","Redux/Reducers/index.js","Redux/actions/types.js","Redux/store.js","Components/User.jsx","Components/AddUserBtn.jsx","App.js","MainWrapper.js","serviceWorker.js","index.js"],"names":["initialState","combineReducers","users","state","action","type","payload","store","createStore","rootReducer","User","handle","status_for_handle","loading","rel","href","target","className","alt","src","id","replace","AddUserBtn","useState","user","setUser","dispatch","useDispatch","onClick","Axios","get","params","then","res","console","log","catch","err","value","placeholder","onChange","evt","App","isLoading","setLoading","index","queryProblem","setQueryProblem","storedUsers","useSelector","setUsers","makeRequest","a","requests","user_names","calls","updatedUsersData","push","Promise","all","i","length","req","data","result","problem","contestId","verdict","useEffect","autoFocus","pattern","title","str","toUpperCase","parseInt","isNaN","handleChange","Object","entries","map","idx","user_name","user_status","key","MainWrapper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.13bebf26.chunk.js","sourcesContent":["import { ADD_USER, REMOVE_USER } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n\t'Hanii.Gerges': 'HIDE',\r\n\t'Mr.N_Nabhani': 'HIDE', \r\n\t'theBiker': 'HIDE', \r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n\tswitch(action.type){\r\n\r\n\t\tcase ADD_USER:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[action.payload]: \"HIDE\",\r\n\t\t\t}\r\n\r\n\t\tcase REMOVE_USER:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t}\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n\r\n}","import { combineReducers } from \"redux\";\r\nimport usersReducer from \"./usersReducer\";\r\n\r\nexport default combineReducers({\r\n\tusers: usersReducer,\r\n});","export const ADD_USER \t\t= 'ADD_TO_DISPLAY';\r\nexport const REMOVE_USER \t= 'REMOVE_FROM_DISPLAY';","import { createStore } from 'redux';\r\nimport rootReducer from './Reducers';\r\n\r\nconst initailState = {};\r\n\r\nconst store = createStore(\r\n\trootReducer, \r\n\tinitailState\r\n);\r\n\r\n\r\nexport default store;","import React from 'react';\r\nimport '../Styling/user.scss';\r\n\r\nfunction User({handle, status_for_handle, loading}){\r\n  \r\nreturn( \r\n        <a rel=\"noopener noreferrer\" href={`https://codeforces.com/profile/${handle}`} target=\"_blank\">\r\n        <div className='user'>\r\n            <h3> {handle} </h3>\r\n\r\n            <img alt='' src={\"images/user.png\"}/>\r\n\r\n            <div className='status'>\r\n                {loading && <i className=\"fa fa-spin fa-refresh\"></i>}\r\n                {!loading && <div id={status_for_handle.replace(/\\s/g,'-')}>{status_for_handle}</div>}\r\n            </div>\r\n        </div>\r\n        </a>\r\n    );\r\n}\r\n\r\nexport default User;","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { ADD_USER } from '../Redux/actions/types';\r\n\r\nimport '../Styling/UserBtn.scss';\r\n\r\nimport Axios from 'axios';\r\n\r\nfunction AddUserBtn(){\r\n\t\r\n\tconst [user, setUser] = useState('');\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst addNewUser = ()=>{\r\n\r\n\t\t Axios.get('https://codeforces.com/api/user.status', {params: {handle: user}}).then(\r\n\t\t\t (res)=>{\r\n\t\t\t\tconsole.log(`user found!`);\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: ADD_USER,\r\n\t\t\t\t\tpayload: user\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tsetUser('');\r\n\r\n\t\t\t }\r\n\t\t ).catch((err) => {\r\n\t\t\tconsole.log(`user not found`);\r\n\t\t\tthrow err;\r\n\t\t });\r\n\t}\r\n\r\n\treturn(\r\n\r\n\t\t<div className='addUserBtn'>\r\n\t\t\t<h3> Add User </h3>\r\n\t\t\t\r\n\t\t\t<button id='btn' onClick={()=>{addNewUser()}}>+</button>\r\n\r\n\t\t\t<input value={user} id='in' type=\"text\" placeholder=\"enter handle\"\r\n\t\t\tonChange={ (evt)=>{setUser(evt.target.value)} } />\r\n\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\n\r\n\r\nexport default AddUserBtn;","import React, {useState, useEffect} from 'react';\nimport { useSelector } from 'react-redux';\n\nimport User from './Components/User.jsx';\nimport AddUserBtn from './Components/AddUserBtn.jsx';\n\nimport './Styling/App.scss';\n\nimport Axios from 'axios';\n\n/*\n  * Fix the case of letter followed with a number in the \"problem index\".\n\n  ~ Add more users.\n\n  * Better responsiveness.\n\n  ~ Functional Component with useEffect.\n  \n*/\n\nfunction App() {\n  const [isLoading, setLoading] = useState(false);\n  const [queryProblem, setQueryProblem] = useState({id: '', index: ''});\n\n\tconst storedUsers = useSelector(state => state.users);\n\t// console.log(storedUsers);\n\t\n\tconst [users, setUsers] = useState(storedUsers); //? Stored in Redux\n\n\n  const makeRequest = async ()=>{\n    let requests = {user_names: [], calls: []};\n    \n    let updatedUsersData = {}; //{'handle': 'STATUS'}\n\n    for (const user in storedUsers) {\n      requests.user_names.push(user);\n      requests.calls.push(\n        Axios.get('https://codeforces.com/api/user.status',\n        {params: {handle: user}}\n        )\n      );\n      updatedUsersData[user] = 'NOT SOLVED';\n    }\n\n    requests.calls = await Promise.all(requests.calls);\n    \n    //? forEach\n\t\t\tfor(let i = 0; i < requests.user_names.length; ++i){\n\t\t\t\tlet req = requests.calls[i];\n\n\t\t\t\tfor(const res of req.data.result){\n\n\t\t\t\t\tif(res.problem.contestId === queryProblem.id && res.problem.index === queryProblem.index){\n\n\t\t\t\t\t\tif(res.verdict === 'OK')\n\t\t\t\t\t\t\tupdatedUsersData[requests.user_names[i]] = 'SOLVED';\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tupdatedUsersData[requests.user_names[i]] = 'TRIED';\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t// Dispatch({action: updateUsers,  payload: newusersData})\n\t\tsetUsers(updatedUsersData);\n\t}\n\t\n\tuseEffect(()=>{\n\t\tsetUsers(storedUsers);\n\t\t\t\n\t}, [storedUsers]);\n\n\tuseEffect(()=>{\n\t\tsetLoading(true);\n\n\t\tmakeRequest().then(()=>{\n\t\t\tsetLoading(false);\n\t\t});\n\n\t}, [storedUsers, queryProblem]);\n\n\n\t\n  const handleChange = (evt)=>{\n\n    let str = evt.target.value.replace(/\\s/g,'').toUpperCase();\n    //console.log(str);\n    const id = parseInt(str);\n    const index = str.replace(id, '');\n\n    if(str.length === 0 || isNaN(id) || index === ''){\n      // this.setState({\n      //   users: {'Hanii.Gerges': 'HIDE', 'Mr.N_Nabhani': 'HIDE', 'theBiker': 'HIDE'},\n      //   isLoading: false\n      // });\n      return;\n    }\n\t\t\n\t\tsetQueryProblem({id, index});\n\t\t\n    // this.setState({\n    //   id: id,\n    //   index: index,\n    //   isLoading: true\n    // }, ()=>this.makeRequest());\n\n\t}\n\t\n  return (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\n\t\t\t\t<h1> Who Solved Problem  </h1>\n\t\t\t\t<input autoFocus type='text' pattern='\\d+\\w\\d?'\n\t\t\t\ttitle='Not a valid problem' \n\t\t\t\tplaceholder='1272C'\n\t\t\t\tonChange={(evt)=>handleChange(evt)}/>\n\t\t\t\t<h1> ? </h1>  \n\n\t\t\t</header>\n\n\t\t\t<main>\n\t\t\t\t\t<div className='users-area'>\n\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tObject.entries(users).map(\n\t\t\t\t\t\t\t\t\t([user_name, user_status], idx) =>\n\t\t\t\t\t\t\t\t\t<User key={idx}\n\t\t\t\t\t\t\t\t\t\thandle={user_name}\n\t\t\t\t\t\t\t\t\t\tstatus_for_handle={user_status}\n\t\t\t\t\t\t\t\t\t\tloading={isLoading}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t<AddUserBtn/>\n\n\t\t\t\t\t</div>\n\t\t\t</main>\n\n\t\t</div>\n\t);\n}\n\nexport default App\n\n\n// class App extends Component{\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       id:-1, index: 'A', \n//       users: {'Hanii.Gerges': 'HIDE', 'Mr.N_Nabhani': 'HIDE', 'theBiker': 'HIDE'},\n//       isLoading: false\n//     };\n// }\n\n//   // makeRequest = async ()=>{\n//   //   let requests = {user_names: [], calls: []};\n\n//   //   const [id, index] = [this.state.id, this.state.index];\n//   //   console.log(id, index);\n    \n//   //   let initObj = {}; //'Hanii.Gerges': 'NOT SOLVED', 'Mr.N_Nabhani': 'NOT SOLVED', 'theBiker': 'NOT SOLVED'\n\n//   //   for (const user in this.state.users) {\n//   //     requests.user_names.push(user);\n//   //     requests.calls.push(\n//   //       Axios.get('https://codeforces.com/api/user.status',\n//   //       {params: {handle: user}}\n//   //       )\n//   //     );\n//   //     initObj[user] = 'NOT SOLVED';\n//   //   }\n\n//   //   requests.calls = await Promise.all(requests.calls);\n    \n    \n//   //   for(let i = 0; i < requests.user_names.length; ++i){\n//   //     let req = requests.calls[i];\n\n//   //     for(const res of req.data.result){\n\n//   //       if(res.problem.contestId === this.state.id && res.problem.index === this.state.index){\n\n//   //         if(res.verdict === 'OK')\n//   //           initObj[requests.user_names[i]] = 'SOLVED';\n//   //         else\n//   //           initObj[requests.user_names[i]] = 'TRIED';\n\n//   //         break;\n//   //       }\n//   //     }\n//   //   }\n    \n//   //   this.setState({\n//   //     users: initObj,\n//   //     isLoading: false,\n//   //   })\n//   // }\n\n//   handleChange = (e)=>{\n\n//     let str = e.target.value.replace(/\\s/g,'').toUpperCase();\n//     console.log(str);\n//     const id = Number(str.slice(0, str.length-1));\n//     const index = str[str.length-1];\n\n//     if(str === ''){\n//       this.setState({\n//         users: {'Hanii.Gerges': 'HIDE', 'Mr.N_Nabhani': 'HIDE', 'theBiker': 'HIDE'},\n//         isLoading: false\n//       });\n//       return;\n//     }\n    \n//     this.setState({\n//       id: id,\n//       index: index,\n//       isLoading: true\n//     }, ()=>this.makeRequest());\n\n//   }\n\n//   render(){\n   \n//   }\n\n// }\n\n/*\nfunction App() {\n\n  const [searchVar, setSearchVar] = useState({id:-1, idx: 'A'});\n  useEffect(()=>{\n      makeRequest();\n  });\n  \n  const [users, setUsers] = useState({'Hanii.Gerges': '...', 'Mr.N_Nabhani': '...', 'theBiker': '...'});\n\n  const makeRequest = async ()=>{\n    let requests = {user_names: [], calls: []};\n\n    const {id, idx} = searchVar;\n    console.log(id, idx);\n\n    for (const user in users) {\n      requests.user_names.push(user);\n      requests.calls.push(\n        axios.get('https://codeforces.com/api/user.status',\n        {params: {handle: user}}\n        )\n      );\n    }\n\n    requests.calls = await Promise.all(requests.calls);\n    \n    let initObj = {'Hanii.Gerges': 'NOT SOLVED', 'Mr.N_Nabhani': 'NOT SOLVED', 'theBiker': 'NOT SOLVED'};\n    \n    for(let i = 0; i < requests.user_names.length; ++i){\n      let req = requests.calls[i];\n\n      for(const res of req.data.result){\n\n        if(res.problem.contestId === id && res.problem.index === idx){\n\n          if(res.verdict === 'OK')\n            initObj[requests.user_names[i]] = 'SOLVED';\n          else\n            initObj[requests.user_names[i]] = 'TRIED';\n\n          break;\n        }\n      }\n    }\n    \n    setUsers(initObj);\n  }\n  //1293C\n\n  const handler = (e)=>{\n    let str = e.target.value;\n    const id = Number(str.slice(0, str.length-1));\n    const idx = str[str.length-1];\n    setSearchVar({id, idx});\n  }\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n        <h1> Did the PPG Solve Problem </h1>\n        <input type='text' onChange={(e)=>handler(e)}/>\n        <h1> ? </h1>\n\n      </header>\n\n      <main>\n          <div className='users-area'>\n\n              <User\n                name='Hanii'\n                handle={users['Hanii.Gerges']}\n                imgURL='Hanii.jpg'\n                loading={false}\n              />\n\n              <div className='user'>\n                <h3> Najm </h3>\n\n                <img src='Najm.jpg'/>\n\n                <div className='status'>\n                  { false && <i class=\"fa fa-spin fa-refresh\"></i>}\n                  { !false && users['Mr.N_Nabhani']}\n                </div>\n              </div>\n\n              <div className='user' >\n                <h3> Maher </h3>\n\n                <img src='Maher.png'/>\n                \n                <div className='status'>\n                    {users['theBiker']}\n                </div>\n\n              </div>\n          </div>\n      </main>\n\n    </div>\n  );\n}\n*/\n\n\n//export default App;\n","import React from 'react'\r\nimport { Provider } from 'react-redux';\r\nimport store from './Redux/store';\r\nimport App from './App';\r\n\r\nfunction MainWrapper() {\r\n\treturn (\r\n\t\t<Provider store={store}>\r\n\t\t\t<App />\r\n\t\t</Provider>\r\n\t)\r\n}\r\n\r\nexport default MainWrapper;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainWrapper from './MainWrapper';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MainWrapper />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}