{"version":3,"sources":["Components/User.js","App.js","serviceWorker.js","index.js"],"names":["User","name","handle","status_for_handle","imgURL","loading","CFimgURL","href","className","src","class","id","replace","App","props","makeRequest","a","user","requests","user_names","calls","state","index","console","log","users","push","Axios","get","params","Promise","all","initObj","i","length","req","data","result","res","problem","contestId","verdict","setState","isLoading","handleChange","e","str","target","value","toUpperCase","Number","slice","type","onChange","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f24e751.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst User = ({name, handle, status_for_handle, imgURL, CFimgURL, loading})=>{\r\n  return( \r\n    <a href={`https://codeforces.com/profile/${handle}`}>\r\n      <div className='user'>\r\n          <h3 className='main'> {name} </h3>\r\n          <h3 className='display-on-hover'> {handle} </h3>\r\n\r\n          <img className='main' src={`images/${imgURL}`}/>\r\n          <img className='display-on-hover' src={`images/${handle}.jpg`}/>\r\n\r\n          <div className='status'>\r\n              {loading && <i class=\"fa fa-spin fa-refresh\"></i>}\r\n              {!loading && <div id={status_for_handle.replace(/\\s/g,'-')}>{status_for_handle}</div>}\r\n          </div>\r\n      </div>\r\n    </a>\r\n  )\r\n}\r\n\r\nexport default User;","import React, {useState, useEffect, Component} from 'react';\nimport Axios from 'axios';\nimport User from './Components/User.js';\nimport './App.scss';\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      id:-1, index: 'A', \n      users: {'Hanii.Gerges': 'HIDE', 'Mr.N_Nabhani': 'HIDE', 'theBiker': 'HIDE'},\n      isLoading: false\n    };\n  }\n\n  makeRequest = async ()=>{\n    let requests = {user_names: [], calls: []};\n\n    const [id, index] = [this.state.id, this.state.index];\n    console.log(id, index);\n\n    for (const user in this.state.users) {\n      requests.user_names.push(user);\n      requests.calls.push(\n        Axios.get('https://codeforces.com/api/user.status',\n        {params: {handle: user}}\n        )\n      );\n    }\n\n    requests.calls = await Promise.all(requests.calls);\n    \n    let initObj = {'Hanii.Gerges': 'NOT SOLVED', 'Mr.N_Nabhani': 'NOT SOLVED', 'theBiker': 'NOT SOLVED'};\n    \n    for(let i = 0; i < requests.user_names.length; ++i){\n      let req = requests.calls[i];\n\n      for(const res of req.data.result){\n\n        if(res.problem.contestId === this.state.id && res.problem.index === this.state.index){\n\n          if(res.verdict === 'OK')\n            initObj[requests.user_names[i]] = 'SOLVED';\n          else\n            initObj[requests.user_names[i]] = 'TRIED';\n\n          break;\n        }\n      }\n    }\n    \n    this.setState({\n      users: initObj,\n      isLoading: false,\n    })\n  }\n\n  handleChange = (e)=>{\n\n    let str = e.target.value.replace(/\\s/g,'').toUpperCase();\n    console.log(str);\n    const id = Number(str.slice(0, str.length-1));\n    const index = str[str.length-1];\n\n    if(str === ''){\n      this.setState({\n        users: {'Hanii.Gerges': 'HIDE', 'Mr.N_Nabhani': 'HIDE', 'theBiker': 'HIDE'},\n        isLoading: false\n      });\n      return;\n    }\n    \n    this.setState({\n      id: id,\n      index: index,\n      isLoading: true\n    }, ()=>this.makeRequest());\n\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n  \n          <h1> Did the PPG Solve Problem </h1>\n          <input type='text' onChange={(e)=>this.handleChange(e)}/>\n          <h1> ? </h1>\n  \n        </header>\n  \n        <main>\n            <div className='users-area'>\n\n                <User\n                  name='Hanii'\n                  handle='Hanii.Gerges'\n                  status_for_handle={this.state.users['Hanii.Gerges']}\n                  imgURL='Hanii.jpg'\n                  CFimgURL=''\n                  loading={this.state.isLoading}\n                />\n\n                <User\n                  name='Najm'\n                  handle='Mr.N_Nabhani'\n                  status_for_handle={this.state.users['Mr.N_Nabhani']}\n                  imgURL='Najm.jpg'\n                  CFimgURL=''\n                  loading={this.state.isLoading}\n                />\n\n                <User\n                  name='Maher'\n                  handle='theBiker'\n                  status_for_handle={this.state.users['theBiker']}\n                  imgURL='Maher.png'\n                  CFimgURL=''\n                  loading={this.state.isLoading}\n                />\n\n            </div>\n        </main>\n  \n      </div>\n    );\n  }\n\n}\n\n/*\nfunction App() {\n\n  const [searchVar, setSearchVar] = useState({id:-1, idx: 'A'});\n  useEffect(()=>{\n      makeRequest();\n  });\n  \n  const [users, setUsers] = useState({'Hanii.Gerges': '...', 'Mr.N_Nabhani': '...', 'theBiker': '...'});\n\n  const makeRequest = async ()=>{\n    let requests = {user_names: [], calls: []};\n\n    const {id, idx} = searchVar;\n    console.log(id, idx);\n\n    for (const user in users) {\n      requests.user_names.push(user);\n      requests.calls.push(\n        axios.get('https://codeforces.com/api/user.status',\n        {params: {handle: user}}\n        )\n      );\n    }\n\n    requests.calls = await Promise.all(requests.calls);\n    \n    let initObj = {'Hanii.Gerges': 'NOT SOLVED', 'Mr.N_Nabhani': 'NOT SOLVED', 'theBiker': 'NOT SOLVED'};\n    \n    for(let i = 0; i < requests.user_names.length; ++i){\n      let req = requests.calls[i];\n\n      for(const res of req.data.result){\n\n        if(res.problem.contestId === id && res.problem.index === idx){\n\n          if(res.verdict === 'OK')\n            initObj[requests.user_names[i]] = 'SOLVED';\n          else\n            initObj[requests.user_names[i]] = 'TRIED';\n\n          break;\n        }\n      }\n    }\n    \n    setUsers(initObj);\n  }\n  //1293C\n\n  const handler = (e)=>{\n    let str = e.target.value;\n    const id = Number(str.slice(0, str.length-1));\n    const idx = str[str.length-1];\n    setSearchVar({id, idx});\n  }\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n        <h1> Did the PPG Solve Problem </h1>\n        <input type='text' onChange={(e)=>handler(e)}/>\n        <h1> ? </h1>\n\n      </header>\n\n      <main>\n          <div className='users-area'>\n\n              <User\n                name='Hanii'\n                handle={users['Hanii.Gerges']}\n                imgURL='Hanii.jpg'\n                loading={false}\n              />\n\n              <div className='user'>\n                <h3> Najm </h3>\n\n                <img src='Najm.jpg'/>\n\n                <div className='status'>\n                  { false && <i class=\"fa fa-spin fa-refresh\"></i>}\n                  { !false && users['Mr.N_Nabhani']}\n                </div>\n              </div>\n\n              <div className='user' >\n                <h3> Maher </h3>\n\n                <img src='Maher.png'/>\n                \n                <div className='status'>\n                    {users['theBiker']}\n                </div>\n\n              </div>\n          </div>\n      </main>\n\n    </div>\n  );\n}\n*/\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}